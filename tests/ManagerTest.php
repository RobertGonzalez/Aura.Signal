<?php
namespace aura\signal;

/**
 * Test class for Manager.
 * Generated by PHPUnit on 2011-02-23 at 20:22:54.
 */
class ManagerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        parent::setUp();
    }

    public function newManager($handlers = null)
    {
        return new Manager(
            new HandlerFactory,
            new ResultFactory,
            new ResultCollection,
            $handlers
        );
    }
    
    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        parent::tearDown();
    }

    /**
     * @todo Implement testHandler().
     */
    public function testHandlerAndGetHandlers()
    {
        $signal = $this->newManager(array(
            // no position
            array(
                '\UnexpectedValueException',
                'mock_signal',
                array('MockAlpha', 'method')
            ),
            // early position
            array(
                '\StdClass',
                'mock_signal',
                array('MockBeta', 'method'),
                4000
            ),
            // late position
            array(
                '\Exception',
                'mock_signal',
                array('MockGamma', 'method'),
                6000
            ),
        ));
        
        // make sure they get sorted, which only happens on a signal send
        $signal->send(null, null);
        
        // now get them
        $handlers = $signal->getHandlers();
        
        // should be three position groups, in this order
        $expect = array(4000, 5000, 6000);
        $actual = array_keys($handlers);
        $this->assertSame($expect, $actual);
        
        // make sure the handlers are in the right groups
        $this->assertSame('\StdClass', $handlers[4000][0]->sender);
        $this->assertSame('\UnexpectedValueException', $handlers[5000][0]->sender);
        $this->assertSame('\Exception', $handlers[6000][0]->sender);
    }
    
    /**
     * @todo Implement testSend().
     */
    public function testSend()
    {
        $signal = $this->newManager(array(
            // late position
            array(
                '\Unexpected',
                'mock_signal',
                function ($foo) { return "$foo-unexpected"; },
                6000
            ),
            // no position
            array(
                '\StdClass',
                'mock_signal',
                function ($foo) { return "$foo-stdclass-mid"; },
                5000
            ),
            // early position
            array(
                '\StdClass',
                'mock_signal',
                function ($foo) { return "$foo-stdclass-early"; },
                4000
            ),
        ));
        
        // send a signal that should match two handlers
        $origin = new \StdClass;
        $collection = $signal->send($origin, 'mock_signal', 'hello');
        $this->assertTrue(count($collection) == 2);
        $this->assertSame('hello-stdclass-early', $collection[0]->value);
        $this->assertSame('hello-stdclass-mid', $collection[1]->value);
        
        // add a handler that stops processing
        $signal->handler(
            '\StdClass',
            'mock_signal',
            function ($foo) { return Manager::STOP; },
            4500 // just before the mid group
        );
        
        $collection = $signal->send($origin, 'mock_signal', 'hello');
        $this->assertTrue(count($collection) == 2);
        $this->assertSame('hello-stdclass-early', $collection[0]->value);
        $this->assertSame(Manager::STOP, $collection[1]->value);
    }
}
